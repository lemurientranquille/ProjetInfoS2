#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <allegro.h>
#include <string.h>


/// STRUCTURE DES JOUEURS ///

typedef struct joueur  //Cette structure gerera les donnees de joueurs tout au long de la partie
{
        char pseudo[50];
        int classe;
        int PA;
        int PM;
        int PU;
        int PV;  // point de vie
        int x;  //c'est une matrice d'entier normalement mais j'arrive pas a initialiser mdrrr on laisse comme ca pour l'instant
        int y;
        int lastx; //avec des x et y
        int lasty;
        char CAC[100];
        char Sort1[100];
        char Sort2[100];
        char Passif[100];
        char Ulti[100];
        bool sortie;
    } t_joueur;


///  INITIALISATION ALLEGRO ///

void initialisationAllegro(){
    allegro_init();
    set_color_depth(desktop_color_depth());
    if((set_gfx_mode(GFX_AUTODETECT_WINDOWED,800,600,0,0))!=0){
        allegro_message("Pb de mode graphique") ;
        allegro_exit();
        exit(EXIT_FAILURE);
    }
    install_keyboard();
    install_mouse();
}

/// AFFICHAGE DES ECRANS ///
//------------------------------------------------------------------//

void AffichageEcran1(int* nb_joueur)
{
    BITMAP* accueil;
    accueil = load_bitmap("accueilbis.bmp",NULL);

    BITMAP* buffer;
    buffer = create_bitmap(SCREEN_W, SCREEN_H);

    int next=0; //va nous permettre de sortir de la boucle d'affichage lorsqu'un choix est fait

    while(next!=1){

        blit(accueil, buffer, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
        show_mouse(buffer);
        blit(buffer, screen, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
        clear_bitmap(buffer);

        if((mouse_b&1)&&(mouse_x>=174)&&(mouse_x<=290)&&(mouse_y>=286)&&(mouse_y<=387))
            {
                *nb_joueur=2;
                next=1;
                //allegro_message("joueur2");
            }

        if((mouse_b&1)&&(mouse_x>=320)&&(mouse_x<=431)&&(mouse_y>=286)&&(mouse_y<=387))
            {
                *nb_joueur=3;
                next=1;
                //allegro_message("joueur3");
            }

        if((mouse_b&1)&&(mouse_x>=463)&&(mouse_x<=575)&&(mouse_y>=286)&&(mouse_y<=387))
            {
                *nb_joueur=4;
                next=1;
                //allegro_message("joueur4");
            }
    }
    allegro_message("Nombre de joueur valide!");
    destroy_bitmap(buffer);
    //clear_bitmap(accueil);
    //destroy_bitmap(accueil);
}

void AffichageEcran2()
{
    BITMAP* accueil2;
    accueil2 = load_bitmap("accueil2bis.bmp",NULL);

    BITMAP* buffer2;
    buffer2 = create_bitmap(SCREEN_W, SCREEN_H);

    blit(accueil2, buffer2, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
    show_mouse(buffer2);
    blit(buffer2, screen, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
    clear_bitmap(buffer2);
    getchar();
}

void AffichageEcran3()
{
    BITMAP* battle;
    battle = load_bitmap("battle.bmp",NULL);

    BITMAP* buffer3;
    buffer3 = create_bitmap(SCREEN_W, SCREEN_H);

    while(!key[KEY_ESC])
        {
           blit(battle, buffer3, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
           show_mouse(buffer3);
           blit(buffer3, screen, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
           clear_bitmap(buffer3);
        }
        destroy_bitmap(buffer3);
        allegro_message("Sortie3");
}
//-----------------------------------------------------------//


/// FONCTIONS REMPLISSAGE DES INFOS JOUEURS ///
//-----------------------------------------------------------//

t_joueur* my_init(t_joueur* tab, int* nb_joueur) //On fait une fonction au type de la structure afin de pouvoir renvoyer ses modifications
{
    AffichageEcran1(nb_joueur);

    tab = (t_joueur*)malloc(*nb_joueur * sizeof(t_joueur));  //Allocation dynamique de Tab et test pour blinder l'alloc

    if (tab == NULL)
        allegro_message("ERROR ALLOC");

    for (int i = 0 ; i< *nb_joueur ; i++)
    {
            tab[i].x = rand()%8 ;
            tab[i].y = rand()%8;
            tab[i].lastx =0 ;
            tab[i].lasty = 0;
            tab[i].PU=0;
            tab[i].PA=5;
            tab[i].PM=5;
            tab[i].sortie = true;
    }
    return (tab);
}

void dataFill (t_joueur* num_joueur, int* nb_joueur)
{
    int compteur =0; // Initialisation d'un compteur qui va nous permettre de blinder la saisie
    AffichageEcran2();

    for (int i = 0; i<*nb_joueur; i++)  // Boucle for qui va saisir pour chaque joueur le pseudo
    {                                                           // On remplit pour un joueur et le compteur passe à 1.
        printf("\nVeuillez saisir le nom de travailleur :\n");
        scanf("%s", num_joueur[i].pseudo);
        printf("\nVeuillez choisir votre classe.\n");
        do
        {
            fflush(stdin);
            printf("\nTAPEZ - [1] pour la classe Hopital");
            printf("\n        [2] pour la classe La Poste");
            printf("\n        [3] pour la classe Brigade Anti-Criminalite");
            printf("\n        [4] pour la classe Eboueurs");
            printf("\n        [5] pour la classe Mairie");
            printf("\n        [6] pour la classe RATP\n");
            scanf("%d", &(num_joueur[i].classe));
            if(compteur>0) // Si ce compteur passe à 1 ou +, on analyse les données des autres joueurs pour vérifier si le pion n'est pas déjà pris
            {
                for(int J=0 ; J<compteur ; J++)
                {
                    if(num_joueur[J].classe==num_joueur[i].classe)
                    {
                        printf("\n C'est le meme pion que le joueur %d", J+1);
                         printf("\nLa classe saisie est: %d",(num_joueur[i].classe));
                         num_joueur[i].classe=0;
                         printf("\nREFAITES UN CHOIX ");
                    }
                }
            }
        }
        while ((num_joueur[i].classe <1) || (num_joueur[i].classe >6)); //blindage de la saisie
        compteur++;
      }
    allegro_message("Nom et classe des travailleurs valides!");
    //destroy_bitmap(buffer2);

    for (int i = 0; i<*nb_joueur; i++)
    {
        switch (num_joueur[i].classe)
        {
        case(1):
            num_joueur[i].PV =1000 ;
            strcpy(num_joueur[i].CAC,"Scalpel rouille");
            strcpy(num_joueur[i].Sort1,"Seringue de H1N1");
            strcpy(num_joueur[i].Sort2,"Lancer de brancard");
            strcpy(num_joueur[i].Passif,"Bisous d'infirmiere");
            strcpy(num_joueur[i].Ulti,"Piqure d'amphetamines");

            break;

        case(2):
            num_joueur[i].PV = 800;
            strcpy(num_joueur[i].CAC,"Coup de tampon-encre");
            strcpy(num_joueur[i].Sort1,"Tempete de timbre");
            strcpy(num_joueur[i].Sort2,"Colis piege");
            strcpy(num_joueur[i].Passif,"Lettre verte");
            strcpy(num_joueur[i].Ulti,"Piqure d'amphetamines");
            break;

        case(3):
            num_joueur[i].PV = 900;
            strcpy(num_joueur[i].CAC,"Coup de matraque");
            strcpy(num_joueur[i].Sort1,"LBD");
            strcpy(num_joueur[i].Sort2,"Gazeuse");
            strcpy(num_joueur[i].Passif,"IGPN");
            strcpy(num_joueur[i].Ulti,"Benalla à Contrescape");
            break;

        case(4):
            num_joueur[i].PV = 850;
            strcpy(num_joueur[i].CAC,"Pare-choc avant de camion poubelle");
            strcpy(num_joueur[i].Sort1,"Megot encore chaud");
            strcpy(num_joueur[i].Sort2,"Tesson de Heineken");
            strcpy(num_joueur[i].Passif,"Encombrant");
            strcpy(num_joueur[i].Ulti,"Tri selectif");
            break;

        case(5):
            num_joueur[i].PV = 800;
            strcpy(num_joueur[i].CAC,"Baffe du maire");
            strcpy(num_joueur[i].Sort1,"Tir d'agrapheuse");
            strcpy(num_joueur[i].Sort2,"Cafe bouillant");
            strcpy(num_joueur[i].Passif,"Creation d'un passport");
            strcpy(num_joueur[i].Ulti,"Imprimante defaillante");
            break;

        case(6):
            num_joueur[i].PV = 800;
            strcpy(num_joueur[i].CAC,"Coup de tourniquet");
            strcpy(num_joueur[i].Sort1,"Terminus Porte de la Chapelle");
            strcpy(num_joueur[i].Sort2,"Accident sur les rails");
            strcpy(num_joueur[i].Passif,"Contravention de classe 4");
            strcpy(num_joueur[i].Ulti,"Envie pressante du cheminot");
            break;
        }
    }
}
//------------------------------------------------------//

/// GESTION DES TOURS ///

void gestionTours(t_joueur* tab, int nb_joueur)
{
    int turn=0;
    int choix=0;
    int next=0;
    clock_t t1;
    clock_t t2;
    int duree;
    int compteurTour=0; // va nous permettre de repérer le tour du joueur tout au long de la partie


// La boucle while permet ici de faire tourner le jeu à l'infini pour ne pas terminer le programme tant que la partie n'est pas terminée
    while (turn != 9999)
    {
        for (int i = 0 ; i<nb_joueur ; i++)
        {
            int j=0;
            ronpiche(1000);
            next=0;
            BITMAP* buffer4;
            buffer4 = create_bitmap(SCREEN_W, SCREEN_H);
            t1=clock();
            //déclaration et création des bitmaps d'affichage de plateau et de classe
            BITMAP* arena;
            arena = load_bitmap("arena.bmp",NULL);
            BITMAP* classe1;
            BITMAP* classe2;
            BITMAP* classe3;
            BITMAP* classe4;
            BITMAP* classe5;
            BITMAP* classe6;
            BITMAP* fleche;
            classe1 = load_bitmap("hp.bmp",NULL);
            classe2 = load_bitmap("poste.bmp",NULL);
            classe3 = load_bitmap("bac.bmp",NULL);
            classe4 = load_bitmap("pp.bmp",NULL);
            classe5 = load_bitmap("mairie.bmp",NULL);
            classe6 = load_bitmap("ratp.bmp",NULL);
            fleche = load_bitmap("doigt modif bmp2.bmp",NULL );
                do //boucle permettant d'afficher les classes sélectionnées par les joueurs en fonction du nb de joueur
                {
                    switch (tab[j].classe)
                    {
                    case (1):
                       draw_sprite(arena,classe1,(745),(10));
                       j++; // a chaque fois qu'une sélection est faite on incrémente de 1
                       break;
                    case(2):
                        if(j==0)
                        {
                        draw_sprite(arena,classe2,(745),(10));
                        }
                        else if(j==1)
                        {
                            draw_sprite(arena,classe2,(745),(60));
                        }
                        else if(j==2)
                        {
                            draw_sprite(arena,classe2,(745),(90));
                        }
                        else if(j==3)
                        {
                            draw_sprite(arena,classe2,(745),(115));
                        }
                        else if(j==4)
                        {
                            draw_sprite(arena,classe2,(745),(150));
                        }
                        else if (j==5)
                        {
                            draw_sprite(arena,classe2,(745),(200));
                        }
                        j++;
                        break;
                    case(3):
                        if(j==0)
                        {
                        draw_sprite(arena,classe3,(745),(10));
                        }
                        else if(j==1)
                        {
                            draw_sprite(arena,classe3,(745),(60));
                        }
                        else if(j==2)
                        {
                            draw_sprite(arena,classe3,(745),(90));
                        }
                        else if(j==3)
                        {
                            draw_sprite(arena,classe3,(745),(115));
                        }
                        else if(j==4)
                        {
                            draw_sprite(arena,classe3,(745),(150));
                        }
                        else if (j==5)
                        {
                            draw_sprite(arena,classe3,(745),(200));
                        }

                        j++;
                        break;
                    case(4):
                        if(j==0)
                        {
                            draw_sprite(arena,classe4,(745),(10));
                        }
                        else if(j==1)
                        {
                            draw_sprite(arena,classe4,(745),(60));
                        }
                        else if(j==2)
                        {
                            draw_sprite(arena,classe4,(745),(90));
                        }
                        else if(j==3)
                        {
                            draw_sprite(arena,classe4,(745),(115));
                        }
                        else if(j==4)
                        {
                            draw_sprite(arena,classe4,(745),(150));
                        }
                        else if (j==5)
                        {
                            draw_sprite(arena,classe4,(745),(200));
                        }
                        j++;
                        break;
                    case(5):
                        if(j==0)
                        {
                            draw_sprite(arena,classe5,(745),(10));
                        }
                        else if(j==1)
                        {
                            draw_sprite(arena,classe5,(745),(60));
                        }
                        else if(j==2)
                        {
                            draw_sprite(arena,classe5,(745),(90));
                        }
                        else if(j==3)
                        {
                            draw_sprite(arena,classe5,(745),(115));
                        }
                        else if(j==4)
                        {
                            draw_sprite(arena,classe5,(745),(150));
                        }
                        else if (j==5)
                        {
                            draw_sprite(arena,classe5,(745),(200));
                        }
                        j++;
                        break;
                    case(6):
                        if(j==0)
                        {
                            draw_sprite(arena,classe6,(745),(10));
                        }
                        else if(j==1)
                        {
                            draw_sprite(arena,classe6,(745),(60));
                        }
                        else if(j==2)
                        {
                            draw_sprite(arena,classe6,(745),(90));
                        }
                        else if(j==3)
                        {
                            draw_sprite(arena,classe6,(745),(115));
                        }
                        else if(j==4)
                        {
                            draw_sprite(arena,classe6,(745),(150));
                        }
                        else if (j==5)
                        {
                            draw_sprite(arena,classe6,(745),(200));
                        }
                        j++;
                        break;
                    }
                }while(j<nb_joueur); // on sort de la boucle lorsque le nombre d'affichage correspond au nb de joueur

            while((next!=1))
            {
                t2=clock();
                duree=t2-t1;
                blit(arena, buffer4, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
                show_mouse(buffer4);
                blit(buffer4, screen, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
                clear_bitmap(buffer4);
                textprintf_ex(arena, font, 378, 57, makecol(0,0,0), -1, "%s",tab[i].pseudo);

                switch(compteurTour)
                {
                case(0):
                    draw_sprite(arena,fleche,(700),(15));
                    break;
                case(1):
                    draw_sprite(arena,fleche,(700),(60));
                    break;
                case(2):
                    draw_sprite(arena,fleche,(700),(100));
                    break;
                case(3):
                    draw_sprite(arena,fleche,(700),(130));
                    break;
                case(4):
                    draw_sprite(arena,fleche,(700),(190));
                    break;
                case(5):
                    draw_sprite(arena,fleche,(700),(230));
                    break;
                }



                ///Corps à corps
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=200)&&(mouse_x<=245))
                {
                    choix=1;
                    //next=0;
                    //allegro_message("cac");
                }

                ///Sort 1
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=250)&&(mouse_x<=295))
                {
                    choix=2;
                    next=0;
                }

                ///Sort 2
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=300)&&(mouse_x<=345))
                {
                    choix=3;
                    next=0;
                }

                ///Passif
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=351)&&(mouse_x<=396))
                {
                    choix=4;
                    next=0;
                }

                ///Mouvement
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=402)&&(mouse_x<=447))
                {
                    choix=5;
                    next=0;
                }

                ///Ulti
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=453)&&(mouse_x<=498))
                {
                    choix=6;
                    next=0;
                }

                ///Info/help
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=504)&&(mouse_x<=549))
                {
                    choix=7;
                    next=0;
                }

                ///Joueur suivant
                if((mouse_b&1)&&(mouse_y>=518)&&(mouse_y<=563)&&(mouse_x>=555)&&(mouse_x<=600))
                {
                    choix=8;
                    next=1;
                    if (compteurTour == nb_joueur-1)
                    {
                        compteurTour = 0;
                    }
                    else
                    {
                    compteurTour++;

                    }
                }

                ///Duree de jeu
                if(duree>15000)
                    next=1;


                if(choix==1) ///A FINIR PAS LA BONNE IDEE JE PENSE
                {
                    CorpsACorps(tab,i,nb_joueur,arena,buffer4);
                }
            }
            //allegro_message("Sortie de boucle gestion");
            //destroy_bitmap(buffer4);
            turn++;
        }
    }
}

void ronpiche(unsigned long int n) {
        /* boucle vide parcourue (n * 100000) fois*/
        int i = 0;
        unsigned long int max = n * 100000;
        do {

                i++;
        }
        while(i <= max);
}

/// LANCEMENT DE LA PARTIE ///

void LancementPartie()
{
    int nb_joueur = 0;
    t_joueur* tab = NULL;

    tab = my_init(tab, &nb_joueur);
    dataFill(tab, &nb_joueur);
    //AffichageEcran3();
    gestionTours(tab, nb_joueur);
    free(tab);

}

int xPixeltoCoor(int xPixel) ///à faire avec les coordonnées de toutes les cases
{
    if((xPixel>=201)&&(xPixel<251))
        return 1;
    else if((xPixel>=251)&&(xPixel<301))
        return 2;
    else if((xPixel>=301)&&(xPixel<351))
        return 3;
    else if((xPixel>=351)&&(xPixel<401))
        return 4;
    else if((xPixel>=401)&&(xPixel<451))
        return 5;
    else if((xPixel>=451)&&(xPixel<501))
        return 6;
    else if((xPixel>=501)&&(xPixel<551))
        return 7;
    else if((xPixel>=551)&&(xPixel<601))
        return 8;
    else
    {
        return 0;
        allegro_message("error xPixeltoCoor");
    }

}

int yPixeltoCoor(int yPixel) ///à faire avec les coordonnées de toutes les cases
{
    if((yPixel>=101)&&(yPixel<151))
        return 1;
    else if((yPixel>=151)&&(yPixel<201))
        return 2;
    else if((yPixel>=201)&&(yPixel<251))
        return 3;
    else if((yPixel>=251)&&(yPixel<301))
        return 4;
    else if((yPixel>=301)&&(yPixel<351))
        return 5;
    else if((yPixel>=351)&&(yPixel<401))
        return 6;
    else if((yPixel>=401)&&(yPixel<451))
        return 7;
    else if((yPixel>=451)&&(yPixel<501))
        return 8;
    else
    {
        return 0;
        allegro_message("Error yPixeltoCoor");
    }
}

int xCoortoPixel(int xCoor) ///a faire avec les pixels de toutes les cases
{
    if(xCoor==1)
        return 201;
    else if(xCoor==2)
        return 251;
    else if(xCoor==3)
        return 301;
    else if(xCoor==4)
        return 351;
    else if(xCoor==5)
        return 401;
    else if(xCoor==6)
        return 451;
    else if(xCoor==7)
        return 501;
    else if(xCoor==8)
        return 551;
    else
    {
        return 0;
        allegro_message("Error xCoortoPixel");
    }
}

int yCoortoPixel(int yCoor) ///a faire avec les pixels de toutes les cases
{
    if(yCoor==1)
        return 101;
    else if(yCoor==2)
        return 151;
    else if(yCoor==3)
        return 201;
    else if(yCoor==4)
        return 251;
    else if(yCoor==5)
        return 301;
    else if(yCoor==6)
        return 351;
    else if(yCoor==7)
        return 401;
    else if(yCoor==8)
        return 451;
    else
    {
        return 0;
        allegro_message("Error yCoortoPixel");
    }
}

int CombienDeDegats(int classe, int id) //on peut enlever la variable degats et mettre direct des return mais j'ai fait trop vite mdr
{
    int degats=0;
    ///correspond à un corps a corps
    if(id==0)
    {
      switch (classe)
      {
    case 1:
        degats=70;
        break;
    case 2:
        degats=70;
        break;
    case 3:
        degats=100;
        break;
    case 4:
        degats=80;
        break;
    case 5:
        degats=70;
        break;
    case 6:
        degats=80;
        break;
      }
    }

    ///correspond à un sort 1
    if(id==1)
    {
        switch (classe)
        {
    case 1:
        degats=110;
        break;
    case 2:
        degats=100;
        break;
    case 3:
        degats=100;
        break;
    case 4:
        degats=100;
        break;
    case 5:
        degats=120;
        break;
    case 6:
        degats=110;
        break;
        }
    }
    return degats;
}

void CorpsACorps(t_joueur* tab, int i, int nb_joueur,BITMAP* arena, BITMAP* buffer4) ///A REVOIR MAUVAISE IDEE D'AVOIR UNE BOUCLE PAR ATTAQUE
{
    int xCase, yCase, degats;
    int next=0;
    int id=0;

    ///DETERMINATION DES DEGATS EN FONCTION DE LA CLASSE DE L'ENVOYEUR
    degats=CombienDeDegats(tab[i].classe,id);

    ///AFFICHAGE BOUCLE DE LA DEMANDE UTILISATEUR
    while(next!=1)
    {
      blit(arena, buffer4, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
      show_mouse(buffer4);
      blit(buffer4, screen, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
      clear_bitmap(buffer4);
      textprintf_ex(arena, font, 378, 57, makecol(0,0,0), -1, "%s",tab[i].pseudo);
      textprintf_ex(arena, font, 245, 70, makecol(0,0,0), -1, "Vous avez choisi l'attaque %s a 2 PA.",tab[i].CAC);
      textprintf_ex(arena, font, 260, 85, makecol(0,0,0),-1,"Veuillez choisir une case.");
      //clear_bitmap(buffer);

      ///Si la souris clique sur l'arene
      if((mouse_b&1)&&(mouse_x>=201)&&(mouse_x<601)&&(mouse_y>=101)&&(mouse_y<501))
      {
         xCase=mouse_x;
         yCase=mouse_y;
         next=1;
         allegro_message("Vous avez clique sur une case.");
      }

      ///Si la case cliquée est celle du joueur attaquant
      if((next==1)&&(tab[i].x==xPixeltoCoor(xCase))&&(tab[i].y==yPixeltoCoor(yCase)))
      {
             allegro_message("Vous êtes sur cette case.");
             next=0;
      }

      ///Si la case cliquée n'est pas autour du joueur attaquant
      if((next==1)&&((tab[i].x - xPixeltoCoor(xCase)>=2) || (tab[i].x - xPixeltoCoor(xCase)<=-2)||(tab[i].y - yPixeltoCoor(yCase)>= 2) || (tab[i].y - yPixeltoCoor(yCase)<= -2) ))
      {
          allegro_message("C'est pas une case autour de vous.");
          next=0;
      }

      ///ATTAQUE
      if(next==1)
      {
      for(int k=0;k<nb_joueur;i++)
      {
          ///si un joueur est dans la case visé et que l'attaquant a assez de PA
        if((tab[k].x)==(xPixeltoCoor(xCase)) && (tab[k].y)==(yPixeltoCoor(yCase))&&(tab[i].PA>=2))
            {
              tab[k].PV=tab[k].PV-degats;
              tab[i].PA=tab[i].PA-2;
              tab[i].PU=tab[i].PU+2;
              allegro_message("Attaque réussie");
            }

        else if((tab[k].x!=xPixeltoCoor(xCase))||(tab[k].y!=yPixeltoCoor(yCase)))
            {
                next=0;
                allegro_message("Personne sur cette case.");
            }

        else if (tab[i].PA<2)
            {
                next=0;
                allegro_message("Pas assez de PA.");
            }
      }
      }
    }
}

void PremierSort(t_joueur* tab, int i, int nb_joueur)
{
    int xCase, yCase, degats;
    int next=0;
    int id=1;

    ///DETERMINATION DES DEGATS EN FONCTION DE LA CLASSE DE L'ENVOYEUR
    degats=CombienDeDegats(tab[i].classe,id);

    ///AFFICHAGE BOUCLE DE LA DEMANDE UTILISATEUR
    while(next!=1)
    {
      //blit(arena, buffer, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
      //show_mouse(buffer);
      //blit(buffer, screen, 0, 0, 0, 0,SCREEN_W, SCREEN_H);
      textout_ex(screen,font,"Vous avez choisi le premier sort à 3PA.", 100, 30,makecol(255,255,255),-1);
      textout_ex(screen,font,"Veuillez appuyer sur la case de votre attaque.",100,40,makecol(255,255,255),-1);
      //clear_bitmap(buffer);

      ///Si la souris clique sur l'arene
      if((mouse_b&1)&&(mouse_x>=201)&&(mouse_x<601)&&(mouse_y>=101)&&(mouse_y<501))
      {
         xCase=mouse_x;
         yCase=mouse_y;
         next=1;
         allegro_message("Vous avez cliquée sur une case.");
      }

      ///Si la case cliquée est trop près de l'attaquant
      if (next==1)
      {
      if(((tab[i].x - xPixeltoCoor(xCase)<=1)&&(tab[i].x - xPixeltoCoor(xCase)>=-1)) || ((tab[i].y - yPixeltoCoor(yCase)<=1)&&(tab[i].y - yPixeltoCoor(yCase)>=-1)))
        {
            next=0;
            allegro_message("Case cliquée trop proche de l'envoyeur");
        }
      }

     ///Si la case cliquée est trop loin de l'attaquant
     if(next==1)
     {
         if(((tab[i].x - xPixeltoCoor(xCase)>=3)&&(tab[i].x - xPixeltoCoor(xCase)<=-3)) || ((tab[i].y - yPixeltoCoor(yCase)>=3)&&(tab[i].y - yPixeltoCoor(yCase)<=-3)))
         {
             next=0;
             allegro_message("Case cliquée trop loin de l'envoyeur");
         }
     }

      ///ATTAQUE
      if(next==1)
      {
      for(int k=0;k<nb_joueur;i++)
      {
          ///si un joueur est dans la case visé et que l'attaquant a assez de PA
        if((tab[k].x)==(xPixeltoCoor(xCase)) && (tab[k].y)==(yPixeltoCoor(yCase))&&(tab[i].PA>=2))
            {
              tab[k].PV=tab[k].PV-degats; ///on doit implementer les probabilites des degats
              tab[i].PA=tab[i].PA-3;
              tab[i].PU=tab[i].PU+3;
              allegro_message("Attaque réussie.");
            }
        else if((tab[k].x!=xPixeltoCoor(xCase))||(tab[k].y!=yPixeltoCoor(yCase)))
            {
                next=0;
                allegro_message("Personne sur cette case.");
            }
        else if (tab[i].PA<3)
            {
                next=0;
                allegro_message("Pas assez de PA.");
            }
      }
      }
    }
}



int main()
{
    srand(time(NULL));
    initialisationAllegro();
    LancementPartie();
    allegro_message("Sortie finale");

    allegro_exit();
    return 0;
}END_OF_MAIN();
